name: DevOps Demo CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: devops-demo-app

jobs:
  # Job de Continuous Integration
  ci:
    name:  Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
      - name:  Checkout c칩digo
        uses: actions/checkout@v4

      - name:  Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name:  Instalar depend칡ncias
        run: npm ci

      - name:  Executar ESLint
        run: npm run lint

      - name:  Executar testes
        run: npm run test:coverage

      - name:  Build da aplica칞칚o
        run: npm run build

      - name:  Build imagem Docker
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      - name:  Teste da imagem Docker
        run: |
          docker run -d --name test-container -p 3001:3000 ${{ env.DOCKER_IMAGE }}:latest
          sleep 10
          
          # Teste do endpoint principal
          curl -f http://localhost:3001/ || exit 1
          
          # Teste do health check
          curl -f http://localhost:3001/health || exit 1
          
          # Teste do status
          curl -f http://localhost:3001/api/status || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container

      - name:  Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()

  # Job de Continuous Deployment
  cd:
    name:  Continuous Deployment  
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name:  Checkout c칩digo
        uses: actions/checkout@v4

      - name:  Build imagem para produ칞칚o
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      - name:  Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo " Iniciando deploy..."
            
            # Verificar se Docker est치 funcionando
            if ! docker info > /dev/null 2>&1; then
              echo " Docker n칚o est치 rodando"
              exit 1
            fi
            
            # Navegar para diret칩rio do projeto
            cd /home/ubuntu/devops-demo || {
              echo "Diret칩rio do projeto n칚o encontrado"
              exit 1
            }
            
            # Backup da vers칚o atual
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo " Fazendo backup da vers칚o atual..."
              docker-compose -f docker-compose.prod.yml down
            fi
            
            # Atualizar c칩digo
            echo " Atualizando c칩digo..."
            git pull origin main
            
            # Build e deploy
            echo " Construindo nova vers칚o..."
            docker-compose -f docker-compose.prod.yml build --no-cache
            
            echo " Iniciando nova vers칚o..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Aguardar inicializa칞칚o
            echo " Aguardando inicializa칞칚o..."
            sleep 20
            
            # Verificar se deploy funcionou
            if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo " Deploy falhou - containers n칚o est칚o rodando"
              exit 1
            fi
            
            # Health check
            echo " Verificando sa칰de da aplica칞칚o..."
            max_attempts=5
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                echo " Health check passou na tentativa $attempt"
                break
              fi
              
              if [ $attempt -eq $max_attempts ]; then
                echo " Health check falhou ap칩s $max_attempts tentativas"
                exit 1
              fi
              
              echo " Health check falhou, tentativa $attempt/$max_attempts"
              sleep 10
              attempt=$((attempt + 1))
            done
            
            # Limpeza de imagens antigas
            echo " Limpando imagens antigas..."
            docker image prune -f
            
            echo " Deploy conclu칤do com sucesso!"
            echo " Status dos containers:"
            docker-compose -f docker-compose.prod.yml ps

  # Job de notifica칞칚o
  notify:
    name:  Notifica칞칚o
    needs: [ci, cd]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 游닎 Notificar resultado
        run: |
          if [ "${{ needs.ci.result }}" = "success" ] && [ "${{ needs.cd.result }}" = "success" ]; then
            echo " Pipeline executado com sucesso!"
          else
            echo " Pipeline falhou"
            exit 1
          fi
