name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: minha-app

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Executar linting
        run: npm run lint || echo "Lint não configurado"

      - name: Executar testes
        run: npm test || echo "Testes não configurados ainda"

      - name: Build da aplicação
        run: npm run build

      - name: Build imagem Docker
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      - name: Teste da imagem Docker
        run: |
          docker run -d --name test-container -p 3001:3000 ${{ env.DOCKER_IMAGE }}:latest
          sleep 10
          curl -f http://localhost:3001/health || curl -f http://localhost:3001/ || echo "Health check failed"
          docker stop test-container
          docker rm test-container

  # Job de CD - Deploy apenas na branch main
  cd:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Build imagem para produção
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            if ! docker info > /dev/null 2>&1; then
              echo "Docker não está rodando"
              exit 1
            fi
            
            # Navegar para o diretório do projeto
            cd /home/ubuntu/devops-projeto || exit 1
            
            # Fazer backup da versão atual
            docker-compose down --remove-orphans
            
            # Atualizar código
            git pull origin main
            
            docker-compose build --no-cache
            docker-compose up -d
            
            sleep 15
            if ! docker-compose ps | grep -q "Up"; then
              echo "Deploy falhou"
              exit 1
            fi
            
            docker image prune -f
